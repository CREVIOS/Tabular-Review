services:
  # Redis - Message broker for Celery
  redis:
    image: redis:8.0-alpine
    container_name: tabular-review-redis
    ports:
      - "6380:6379" # Changed to avoid conflict with existing Redis
    volumes:
      - redis-data:/data
    command: redis-server --save 60 1 --loglevel warning
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Backend API
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: tabular-review-backend
    ports:
      - "${PORT:-8001}:8000" # Changed to 8001 to avoid potential conflicts
    environment:
      # Core Settings
      - ENVIRONMENT=${ENVIRONMENT}
      - DEBUG=${DEBUG}
      - PORT=${PORT:-8000}

      # Security
      - SECRET_KEY=${SECRET_KEY}
      - JWT_SECRET=${JWT_SECRET}

      # Supabase
      - SUPABASE_URL=${SUPABASE_URL}
      - SUPABASE_KEY=${SUPABASE_KEY}
      - SUPABASE_ANON_KEY=${SUPABASE_ANON_KEY}
      - SUPABASE_SERVICE_ROLE_KEY=${SUPABASE_SERVICE_ROLE_KEY}

      # Redis & Celery
      - REDIS_HOST=redis # NEW
      - REDIS_PORT=6379 # NEW
      - REDIS_URL=${REDIS_URL}
      - CELERY_BROKER_URL=${CELERY_BROKER_URL}
      - CELERY_RESULT_BACKEND=${CELERY_RESULT_BACKEND}

      # AI Services
      - GEMINI_API_KEY=${GEMINI_API_KEY}
      - OPENAI_API_KEY=${OPENAI_API_KEY}

      # Storage
      - STORAGE_BUCKET=${STORAGE_BUCKET}

      # Performance Settings
      - MAX_CONCURRENT_EXTRACTIONS=${MAX_CONCURRENT_EXTRACTIONS}
      - MAX_UPLOAD_SIZE_MB=${MAX_UPLOAD_SIZE_MB}
      - CHUNK_SIZE_TOKENS=${CHUNK_SIZE_TOKENS}
      - EMBEDDING_BATCH_SIZE=${EMBEDDING_BATCH_SIZE}
    volumes:
      - ./backend:/app
      - backend-uploads:/app/uploads
    depends_on:
      redis:
        condition: service_healthy
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/docs"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Celery Worker
  celery-worker:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: tabular-review-celery-worker
    command: celery -A celery_app worker --loglevel=info --pool=solo
    environment:
      # Core Settings
      - ENVIRONMENT=${ENVIRONMENT}
      - DEBUG=${DEBUG}

      # Security
      - SECRET_KEY=${SECRET_KEY}
      - JWT_SECRET=${JWT_SECRET}

      # Supabase
      - SUPABASE_URL=${SUPABASE_URL}
      - SUPABASE_KEY=${SUPABASE_KEY}
      - SUPABASE_ANON_KEY=${SUPABASE_ANON_KEY}
      - SUPABASE_SERVICE_ROLE_KEY=${SUPABASE_SERVICE_ROLE_KEY}

      # Redis & Celery
      - REDIS_HOST=redis # NEW
      - REDIS_PORT=6379 # NEW
      - REDIS_URL=${REDIS_URL}
      - CELERY_BROKER_URL=${CELERY_BROKER_URL}
      - CELERY_RESULT_BACKEND=${CELERY_RESULT_BACKEND}

      # AI Services
      - GEMINI_API_KEY=${GEMINI_API_KEY}
      - OPENAI_API_KEY=${OPENAI_API_KEY}

      # Storage
      - STORAGE_BUCKET=${STORAGE_BUCKET}

      # Performance Settings
      - MAX_CONCURRENT_EXTRACTIONS=${MAX_CONCURRENT_EXTRACTIONS}
      - MAX_UPLOAD_SIZE_MB=${MAX_UPLOAD_SIZE_MB}
      - CHUNK_SIZE_TOKENS=${CHUNK_SIZE_TOKENS}
      - EMBEDDING_BATCH_SIZE=${EMBEDDING_BATCH_SIZE}
    volumes:
      - ./backend:/app
      - backend-uploads:/app/uploads
    depends_on:
      redis:
        condition: service_healthy
      backend:
        condition: service_healthy
    restart: unless-stopped

  # Celery Beat (Scheduler) - for periodic tasks
  celery-beat:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: tabular-review-celery-beat
    command: celery -A celery_app beat --loglevel=info
    environment:
      # Core Settings
      - ENVIRONMENT=${ENVIRONMENT}
      - DEBUG=${DEBUG}

      # Security
      - SECRET_KEY=${SECRET_KEY}
      - JWT_SECRET=${JWT_SECRET}

      # Supabase
      - SUPABASE_URL=${SUPABASE_URL}
      - SUPABASE_KEY=${SUPABASE_KEY}
      - SUPABASE_ANON_KEY=${SUPABASE_ANON_KEY}
      - SUPABASE_SERVICE_ROLE_KEY=${SUPABASE_SERVICE_ROLE_KEY}

      # Redis & Celery
      # Redis & Celery - ADD THESE LINES
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - REDIS_URL=${REDIS_URL}
      - CELERY_BROKER_URL=${CELERY_BROKER_URL}
      - CELERY_RESULT_BACKEND=${CELERY_RESULT_BACKEND}

      # AI Services
      - GEMINI_API_KEY=${GEMINI_API_KEY}
      - OPENAI_API_KEY=${OPENAI_API_KEY}

      # Storage
      - STORAGE_BUCKET=${STORAGE_BUCKET}
    volumes:
      - ./backend:/app
      - backend-uploads:/app/uploads
    depends_on:
      redis:
        condition: service_healthy
      backend:
        condition: service_healthy
    restart: unless-stopped
    profiles: ["with-scheduler"]

  # Celery Flower (monitoring)
  celery-flower:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: tabular-review-celery-flower
    command: celery -A celery_app flower --port=5555
    ports:
      - "5555:5555"
    environment:
      - REDIS_URL=${REDIS_URL}
      - CELERY_BROKER_URL=${CELERY_BROKER_URL}
      - CELERY_RESULT_BACKEND=${CELERY_RESULT_BACKEND}
    depends_on:
      - redis
      - celery-worker
    restart: unless-stopped
    profiles: ["monitoring"]

  # Frontend
  frontend:
    build:
      context: ./frontend/frontend
      dockerfile: Dockerfile
      args:
        - NEXT_PUBLIC_SUPABASE_URL=${SUPABASE_URL}
        - NEXT_PUBLIC_SUPABASE_ANON_KEY=${SUPABASE_ANON_KEY}
        - BACKEND_URL=http://backend:8000
    container_name: tabular-review-frontend
    ports:
      - "3000:3000"
    environment:
      # Next.js Settings
      - NODE_ENV=production
      - NEXT_TELEMETRY_DISABLED=${NEXT_TELEMETRY_DISABLED}

      # API Configuration
      - BACKEND_URL=http://backend:8000
      - NEXT_PUBLIC_API_URL=${NEXT_PUBLIC_API_URL}
      - USE_NGINX_PROXY=${USE_NGINX_PROXY}

      # Supabase (for client-side)
      - NEXT_PUBLIC_SUPABASE_URL=${SUPABASE_URL}
      - NEXT_PUBLIC_SUPABASE_ANON_KEY=${SUPABASE_ANON_KEY}
    depends_on:
      backend:
        condition: service_healthy
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/api/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Nginx reverse proxy (optional)
  nginx:
    image: nginx:alpine
    container_name: tabular-review-nginx
    ports:
      - "8081:80" # Changed to avoid conflict with existing nginx
      - "8443:443" # Changed to avoid conflict with existing nginx
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/ssl:/etc/nginx/ssl:ro
    depends_on:
      - frontend
      - backend
    restart: unless-stopped
    profiles: ["production"]

volumes:
  redis-data:
  backend-uploads:

networks:
  default:
    name: tabular-review-network
